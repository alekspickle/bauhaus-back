{"version":3,"sources":["components/Rotating.js","components/Bauhaus.js","App.js","serviceWorker.js","index.js"],"names":["Rotatable","styled","div","w","h","top","left","color","Circle","Angle","rotate","Triangle","key","colors","Bauhaus","renderTriangles","Array","from","map","el","i","Math","ceil","random","length","renderCircles","renderAngles","Relative","this","React","Component","main","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+mCAIA,IAAMA,EAAYC,IAAOC,IAAV,IAEJ,gBAAGC,EAAH,EAAGA,EAAH,MAAW,UAAGA,IAAO,MACpB,gBAAGC,EAAH,EAAGA,EAAH,MAAW,UAAGA,IAAO,MACxB,gBAAGC,EAAH,EAAGA,IAAH,MAAa,UAAGA,IAAS,IACxB,gBAAGC,EAAH,EAAGA,KAAH,MAAc,UAAGA,IAAU,IACf,qBAAGC,OAAqB,SAGjCC,EAASP,YAAOD,EAAPC,CAAH,KAMNQ,EAAQR,YAAOD,EAAPC,CAAH,IAGI,qBAAGS,QAAuB,OAInCC,EAAWV,YAAOD,EAAPC,CAAH,IAKO,qBAAGM,OAAqB,QAGrC,qBAAGK,IAAiB,IAAM,EAAK,SAAa,eAGvCX,YAAOD,EAAPC,CAAH,K,+LChCjB,IAAMY,EAAS,CAAC,SAAU,OAAQ,MAAO,SAAU,QAAS,SAEtDC,E,2MACJC,gBAAkB,WAChB,OAAOC,MAAMC,KAAKD,MAAM,KAAKE,IAAI,SAACC,EAAIC,GACpC,IAAIf,EAAMgB,KAAKC,KAAqB,GAAhBD,KAAKE,UACrBjB,EAAOe,KAAKC,KAAqB,GAAhBD,KAAKE,UACtBpB,EAAIkB,KAAKC,KAAqB,IAAhBD,KAAKE,UACnBnB,EAAID,EACJI,EAAQc,KAAKC,KAAKD,KAAKE,SAAWV,EAAOW,OAAS,GACtD,OAAO,kBAACb,EAAD,CAAUC,IAAKQ,EAAGf,IAAKA,EAAKC,KAAMA,EAAMH,EAAGA,EAAGC,EAAGA,EAAGG,MAAOM,EAAON,Q,EAG7EkB,cAAgB,WACd,OAAOT,MAAMC,KAAKD,MAAM,KAAKE,IAAI,SAACC,EAAIC,GACpC,IAAIf,EAAMgB,KAAKC,KAAqB,GAAhBD,KAAKE,UACrBjB,EAAOe,KAAKC,KAAqB,GAAhBD,KAAKE,UACtBpB,EAAIkB,KAAKC,KAAqB,IAAhBD,KAAKE,UACnBnB,EAAID,EACJI,EAAQc,KAAKC,KAAKD,KAAKE,SAAWV,EAAOW,OAAS,GACtD,OAAO,kBAAChB,EAAD,CAAQI,IAAKQ,EAAGf,IAAKA,EAAKC,KAAMA,EAAMH,EAAGA,EAAGC,EAAGA,EAAGG,MAAOM,EAAON,Q,EAG3EmB,aAAe,WACb,OAAOV,MAAMC,KAAKD,MAAM,KAAKE,IAAI,SAACC,EAAIC,GACpC,IAAIf,EAAMgB,KAAKC,KAAqB,GAAhBD,KAAKE,UACrBjB,EAAOe,KAAKC,KAAqB,GAAhBD,KAAKE,UACtBpB,EAAI,EAAIkB,KAAKC,KAAqB,GAAhBD,KAAKE,UACvBnB,EAAI,EAAIiB,KAAKC,KAAqB,IAAhBD,KAAKE,UACvBhB,EAAQc,KAAKC,KAAKD,KAAKE,SAAWV,EAAOW,OAAS,GAClDd,GAAU,EAAIW,KAAKC,KAAqB,IAAhBD,KAAKE,UAEjC,OACE,kBAACd,EAAD,CACEG,IAAKQ,EACLf,IAAKA,EACLC,KAAMA,EACNH,EAAGA,EACHC,EAAGA,EACHG,MAAOM,EAAON,GACdG,OAAQA,O,wEAOd,OACE,kBAACiB,EAAD,KACGC,KAAKb,kBACLa,KAAKH,gBACLG,KAAKF,oB,GAjDQG,IAAMC,WAuDtBH,EAAW1B,IAAO8B,KAAV,KAUCjB,ICjEAkB,MAJf,WACE,OAAO,kBAAC,EAAD,OCQWC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB","file":"static/js/main.d5b980eb.chunk.js","sourcesContent":["// import React from \"react\";\nimport styled from \"styled-components\";\nimport \"../index.css\";\n\nconst Rotatable = styled.div`\n  position: absolute;\n  width: ${({ w }) => `${w}` || \"50\"}px;\n  height: ${({ h }) => `${h}` || \"50\"}px;\n  top: ${({ top }) => `${top}` || 10}%;\n  left: ${({ left }) => `${left}` || 10}%;\n  background-color: ${({ color }) => color || \"blue\"};\n`;\n\nexport const Circle = styled(Rotatable)`\n  border-radius: 50%;\n  animation: floating;\n  transition: 3s;\n`;\n\nexport const Angle = styled(Rotatable)`\n  border-radius: 40px 50px 150px;\n  transition: 3s;\n  transform: rotate(${({ rotate }) => rotate || \"-5\"}deg);\n  // animation: rotate 10s linear infinite;\n`;\n\nexport const Triangle = styled(Rotatable)`\n  width: 0;\n  height: 0;\n  border-top: 30px solid transparent;\n  border-bottom: 35px solid transparent;\n  border-left: 60px solid ${({ color }) => color || \"blue\"};\n  background-color: transparent;\n  transition: 3s;\n  animation: ${({ key }) => (key % 2 === 0 && \"rotate\") || \"rotate-rev\"} 10s linear infinite;\n`;\n\nexport const Line = styled(Rotatable)``;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport { Triangle, Circle, Angle } from \"./Rotating\";\n\nconst colors = [\"yellow\", \"blue\", \"red\", \"orange\", \"green\", \"black\"];\n\nclass Bauhaus extends React.Component {\n  renderTriangles = () => {\n    return Array.from(Array(50)).map((el, i) => {\n      let top = Math.ceil(Math.random() * 90);\n      let left = Math.ceil(Math.random() * 90);\n      let w = Math.ceil(Math.random() * 200);\n      let h = w;\n      let color = Math.ceil(Math.random() * colors.length - 1);\n      return <Triangle key={i} top={top} left={left} w={w} h={h} color={colors[color]} />;\n    });\n  };\n  renderCircles = () => {\n    return Array.from(Array(15)).map((el, i) => {\n      let top = Math.ceil(Math.random() * 90);\n      let left = Math.ceil(Math.random() * 90);\n      let w = Math.ceil(Math.random() * 100);\n      let h = w;\n      let color = Math.ceil(Math.random() * colors.length - 1);\n      return <Circle key={i} top={top} left={left} w={w} h={h} color={colors[color]} />;\n    });\n  };\n  renderAngles = () => {\n    return Array.from(Array(50)).map((el, i) => {\n      let top = Math.ceil(Math.random() * 90);\n      let left = Math.ceil(Math.random() * 90);\n      let w = 1 + Math.ceil(Math.random() * 10);\n      let h = 5 + Math.ceil(Math.random() * 400);\n      let color = Math.ceil(Math.random() * colors.length - 1);\n      let rotate = -5 - Math.ceil(Math.random() * 300);\n\n      return (\n        <Angle\n          key={i}\n          top={top}\n          left={left}\n          w={w}\n          h={h}\n          color={colors[color]}\n          rotate={rotate}\n        />\n      );\n    });\n  };\n\n  render() {\n    return (\n      <Relative>\n        {this.renderTriangles()}\n        {this.renderCircles()}\n        {this.renderAngles()}\n      </Relative>\n    );\n  }\n}\n\nconst Relative = styled.main`\n  position: relative;\n  z-index: -1;\n  opacity: 0.3;\n  width: 100vw;\n  height: 100vh;\n  margin: 0;\n  padding: 0;\n`;\n\nexport default Bauhaus;\n","import React from \"react\";\nimport Bauhaus from \"./components/Bauhaus\";\n\nfunction App() {\n  return <Bauhaus />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}